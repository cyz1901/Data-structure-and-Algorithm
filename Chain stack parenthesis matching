#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
#define OK 1
#define ERROR 0
typedef int Status;
typedef char SElemType;
typedef struct SNode{
	SElemType data;
	struct SNode *next;
}SNode,*pNode;
typedef struct{
	pNode top;
	Status stacksize;
}SqStack,*pSqStack;

void InitStack(pSqStack s){
	s->top=NULL;
	s->stacksize=0;
}
Status StackEmpty(pSqStack s){
	if(s->top==NULL){
	 return 1;
	}
	else{
	return 0;
	}
}
void Push(pSqStack s,SElemType a){
pNode p=(pNode)malloc(sizeof(SNode));
p->data=a;
p->next=s->top;
s->top=p;
s->stacksize++;
}

Status Pop(pSqStack s){
	pNode p=s->top;
	Status a=p->data;
	s->top=p->next;
	s->stacksize--;
	free(p);
	return a;
}
SElemType Gettop(pSqStack s){
	return s->top->data;
}

Status Match(char a,char b){
    if(a+1==b||a+2==b)
        return OK;
    else
        return ERROR;
}
int main(){
    SqStack S;
    char str[10000];
    int i;
    InitStack(&S);
    printf("please enter\n");
    scanf("%s",str);
    for(i=0;str[i]!='\0';i++){
        switch(str[i]){
            case'(':
            case'[':
                Push(&S,str[i]);
                break;
            case')':
            case']':
                if (StackEmpty(&S)){
                    printf("no");
                    return 0;
                }
                else{
					if (Match(Gettop(&S),str[i]))
						Pop(&S);
					else{
						printf("no\n");
						return 0;
                        }
					}
        }
    }
    if (StackEmpty(&S))
		printf("yes\n");
	else
		printf("no\n");
	return 0;

}
